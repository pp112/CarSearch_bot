import re
import os
import json
import aiosqlite
import aiofiles
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardRemove, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from app.keyboards_admin import *
from app.handlers_user import send_start_message
from utils.utils import get_memory_info


router2 = Router()

class Admin(StatesGroup):
    admin_panel = State()
    editing_json = State()
    adding_value_json = State()
    show_db = State()
    editing_db = State()
    del_data_db = State()
    view_logs = State()


@router2.message(CommandStart())
async def restart(message: Message, state: FSMContext):
    await state.clear()
    await send_start_message(message)


@router2.message(F.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üñ•")
async def admin_panel(message: Message, state: FSMContext):
    if message.from_user.id == int(os.getenv("ADMIN_ID")):
        await state.set_state(Admin.admin_panel)
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.", reply_markup=await admin_panel_buttons())
    else:
        await message.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n‚úÖ –ü—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞: <b>–ê123–ê–ê145</b>\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@router2.message(Admin.admin_panel)
async def edit_json(message: Message, state: FSMContext):
    if message.text == "–§–∞–π–ª –ª–æ–≥–æ–≤":
        async with aiofiles.open("bot_logs.log", encoding="utf-8") as file:
            logs = await file.read()
            if logs:
                if len(logs) > 4000:
                    logs = logs[-4000:]
                await state.set_state(Admin.view_logs)
                await message.answer(logs, reply_markup=await clear_logs_button())
            else:
                await message.answer("–§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç", reply_markup=await admin_panel_buttons())
    elif message.text == "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏":
        memory_info = get_memory_info()
        await message.answer(memory_info, reply_markup=await admin_panel_buttons())
    elif message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ json":
        await state.set_state(Admin.editing_json)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–∞–π–ª–æ–º json.", reply_markup=await json_options_buttons())
    elif message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö":
        await state.set_state(Admin.show_db)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞.", reply_markup=await choice_data_db_buttons())
    elif message.text == "–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏":
        await state.clear()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=ReplyKeyboardRemove())



@router2.message(Admin.editing_json)
async def back_to_menu(message: Message, state: FSMContext):
    if message.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª json" or message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ":
        async with aiofiles.open("database/models_for_drom.json", encoding="utf-8") as file:
            file_content = await file.read()
            json_data = json.loads(file_content)
        formatted_data = "\n".join(f"{i + 1} - {key}: {value}" for i, (key, value) in enumerate(json_data.items()))
        await message.answer(formatted_data, reply_markup=await add_value_json_button())

        if message.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ":
            await state.set_state(Admin.adding_value_json)
            msg = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>&lt;id&gt; &lt;value&gt;</b>\n–ü—Ä–∏–º–µ—Ä: <b>1 land_cruiser_prado</b>"
            await message.answer(msg, reply_markup=await finish_add_value_button())
    
    elif message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–∞–π–ª–æ–º json.", reply_markup=await json_options_buttons())
    
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é":
        await state.set_state(Admin.admin_panel)
        await message.answer("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å", reply_markup=await admin_panel_buttons())



@router2.message(Admin.adding_value_json)
async def write_data_json(message: Message, state: FSMContext):
    if re.fullmatch("^(\d+)\s(.+)$", message.text):
        id, value = message.text.split()
        async with aiofiles.open("database/models_for_drom.json", "r+", encoding="utf-8") as file:
            file_content = await file.read()
            data = json.loads(file_content)
            try:
                key = list(data.keys())[int(id) - 1]
            except IndexError:
                await message.answer("–¢–∞–∫–æ–≥–æ ID –≤ —Ñ–∞–π–ª–µ –Ω–µ—Ç.", reply_markup=await finish_add_value_button())
                return
            data[key] = value                               
            await file.seek(0)
            await file.write(json.dumps(data, ensure_ascii=False, indent=4))
            await file.truncate()

        await message.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=await finish_add_value_button())
    elif message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π":
        await state.set_state(Admin.editing_json)
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", reply_markup=await json_options_buttons())
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ.", reply_markup=await finish_add_value_button())



@router2.message(Admin.view_logs)
async def get_logs(message: Message, state: FSMContext):
    if message.text == "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏":
        async with aiofiles.open("bot_logs.log", "w"):
            pass
        await state.set_state(Admin.admin_panel)
        await message.answer("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã", reply_markup=await admin_panel_buttons())
    elif message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤":
        log_file = FSInputFile("bot_logs.log")
        await message.answer_document(log_file)
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        await state.set_state(Admin.admin_panel)
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é", reply_markup=await admin_panel_buttons())



@router2.message(Admin.show_db)
async def show_database(message: Message, state: FSMContext):
    query = None
    if message.text == "–ù–æ–º–µ—Ä–∞":
        query = f"SELECT id, number FROM Carplates ORDER BY id"
    elif message.text == "–ë—Ä–µ–Ω–¥—ã":
        query = f"SELECT id, name FROM Brands ORDER BY id"
    elif message.text == "–ú–æ–¥–µ–ª–∏":
        query = f"SELECT id, name FROM Models ORDER BY id"
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é":
        await state.set_state(Admin.admin_panel)
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=await admin_panel_buttons())
    if query:
        async with aiosqlite.connect("database/cars_database.db") as connection:
            cursor = await connection.cursor()
            await cursor.execute(query)
            result = await cursor.fetchall()
        formatted_data = "\n".join(f"{item[0]} - {item[1]}" for item in result)
        await state.set_state(Admin.editing_db)
        await message.answer(formatted_data, reply_markup=await del_data_db_buttons(message.text))


@router2.message(Admin.editing_db)
async def choice_data_for_del(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.set_state(Admin.show_db)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞.", reply_markup=await choice_data_db_buttons())
    else:
        await state.set_state(Admin.del_data_db)
        if message.text == "–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä":
            await state.update_data(choice="–ù–æ–º–µ—Ä")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–º–µ—Ä–∞, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=await back_button())
        elif message.text == "–£–¥–∞–ª–∏—Ç—å –±—Ä–µ–Ω–¥":
            await state.update_data(choice="–ë—Ä–µ–Ω–¥")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –±—Ä–µ–Ω–¥–∞, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=await back_button())
        elif message.text == "–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å":
            await state.update_data(choice="–ú–æ–¥–µ–ª—å")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –º–æ–¥–µ–ª—å, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=await back_button())


@router2.message(Admin.del_data_db)
async def delete_data_db(message: Message, state: FSMContext):
    if message.text.isdigit():
        data = await state.get_data()
        choice_del = data["choice"]

        if choice_del == "–ù–æ–º–µ—Ä":
            query = "SELECT number FROM Carplates WHERE id=?"
        elif choice_del == "–ë—Ä–µ–Ω–¥":
            query = "SELECT name FROM Brands WHERE id=?"
        elif choice_del == "–ú–æ–¥–µ–ª—å":
            query = "SELECT name FROM Models WHERE id=?"

        async with aiosqlite.connect("database/cars_database.db") as connection:
            cursor = await connection.cursor()
            await cursor.execute(query, (message.text,))
            element = await cursor.fetchone()
            if element:
                element = element[0]
                if choice_del == "–ù–æ–º–µ—Ä":
                    query = "DELETE FROM Carplates WHERE id=?"
                elif choice_del == "–ë—Ä–µ–Ω–¥":
                    query = "DELETE FROM Brands WHERE id=?"
                elif choice_del == "–ú–æ–¥–µ–ª—å":
                    query = "DELETE FROM Models WHERE id=?"
                await cursor.execute(query, (message.text,))
                await connection.commit()
                await message.answer(f"{choice_del} '{element}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª{'–µ–Ω–∞' if choice_del == '–ú–æ–¥–µ–ª—å' else '–µ–Ω'}.")
            else:
                await message.answer(f"{choice_del} —Å —Ç–∞–∫–∏–º ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

    elif message.text == "–ù–∞–∑–∞–¥":
        await state.set_state(Admin.show_db)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞.", reply_markup=await choice_data_db_buttons())
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ.", reply_markup=await back_button(), force_reply=True)
