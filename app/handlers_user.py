import re
import os
import time
import asyncio
import textwrap
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, ContentType, ReplyKeyboardRemove
from app.keyboards_user import *
from get_data.car_search import search_car_number
from plate_detection.detection import detect
from plate_detection.plate_reader import read_number
from utils.utils import download_photo, update_process_message
from database.database_cars import get_description, add_description
from gigachat.gigachat_api import send_promt


router = Router()


@router.message(CommandStart())
async def send_start_message(message: Message):
    start_message = """
                    <b>–ü—Ä–∏–≤–µ—Ç! üëã
                    –Ø –Ω–∞—Ö–æ–∂—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –º–∞—à–∏–Ω–∞–º!</b> üöó\n
                    –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. üì∑\n
                    <b>–í–ê–ñ–ù–û:</b> –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã‚ùóÔ∏è\n
                    –¢–∞–∫–∂–µ, —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ê123–ê–ê45</b>.\n
                    –ü—Ä–∏ —Ç–∞–∫–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ, –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ –∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç —Ä–∞–Ω—å—à–µ, —á–µ–º –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.‚è≥
                    –¢–∞–∫–∂–µ, —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –∏—Å–∫–ª—é—á–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞.\n
                    <b>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b> üòä
                    """
    start_message = textwrap.dedent(start_message)
    if message.from_user.id == int(os.getenv("ADMIN_ID")):
        await message.answer(start_message, reply_markup=await admin_button())
    else:
        await message.answer(start_message)



@router.message(F.text)
async def send_car_info(message: Message, found_number=None):
    start_time = time.time()

    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –±–µ—Ä–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
    text_number = found_number if found_number else message.text.replace(' ', '').upper()
    
    pattern = r"^[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•]\d{3}[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•]{2}\d{2,3}$"
    if re.fullmatch(pattern, text_number):

        process_message = await message.answer(
            f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä: <b>{text_number}</b>\n\n‚è≥ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –º–∞—à–∏–Ω–µ. . ."
            if found_number else "‚è≥ –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –º–∞—à–∏–Ω–µ. . ."
        )
        update_task = asyncio.create_task(update_process_message(process_message, text_number))
    
    await message.bot.send_chat_action(message.chat.id, "typing")
    result = await search_car_number(text_number)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if isinstance(result, dict):
        message_info = f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–∞—à–∏–Ω–µ —Å –Ω–æ–º–µ—Ä–æ–º: {text_number}</b>\n"
        
        if result['brand'] != "" and result['model'] != "":
            message_info += f"\n–ú–æ–¥–µ–ª—å: <b>{result['brand']} {result['model']}</b>"

        if result['year'] != "":
            message_info += f"\n–ì–æ–¥: <b>{result['year']}</b>"
            
        if result['volume'] != "":
            message_info += f"\n–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: <b>{result['volume']} –∫—É–±. —Å–º.</b>"

        if result['power'] != "":
            message_info += f"\n–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: <b>{result['power']} –ª. —Å.</b>"

        if result["color"] != "":
            message_info += f"\n–¶–≤–µ—Ç: <b>{result['color']}</b>"
        
        if "min_price" in result:
            message_info += f"\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{result['min_price']} ‚ÇΩ</b>\n–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{result['avg_price']} ‚ÇΩ</b>"
            message_info += f"\n\n<a href='{result['url']}'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ drom.ru</a>"

        message_info = textwrap.dedent(message_info)

        response_time = time.time() - start_time
        if response_time < 3:
            overtime = 3 - response_time
            await asyncio.sleep(overtime)

        update_task.cancel()
        await process_message.delete()
        await message.answer(message_info, reply_markup=await description_button())
    else:
        try:
            await process_message.delete()
        except UnboundLocalError:
            pass
        await message.answer(result)



@router.message(F.photo)
async def photo_processing(message: Message):
    process_message = await message.answer("üîé –ò—â—É –Ω–æ–º–µ—Ä –Ω–∞ —Ñ–æ—Ç–æ. . .", reply_markup=ReplyKeyboardRemove())
    await message.bot.send_chat_action(message.chat.id, "typing")
    photo_path = await download_photo(message)
    crop_number = await detect(photo_path, message.from_user.username)
    if crop_number:
        carplate = await read_number(crop_number)
        if carplate:
            await process_message.delete()
            await send_car_info(message, found_number=carplate)  
        else:
            await process_message.delete()
            await message.answer("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä.\n\n‚û°Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é.")
    else:
        await process_message.delete()
        await message.answer("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –Ω–∞ —Ñ–æ—Ç–æ.\n\n‚û°Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é.")



@router.callback_query(F.data == "description")
async def send_description(callback: CallbackQuery):
    await callback.answer()
    bot = callback.message.bot
    process_message = await callback.message.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ. . .")
    await bot.send_chat_action(callback.message.chat.id, "typing")
    try:
        text = callback.message.text

        model_pattern = r"–ú–æ–¥–µ–ª—å:\s(.*?)\s(.*?)\n"
        year_pattern = r"–ì–æ–¥:\s(\d{4})"
        brand = re.search(model_pattern, text).group(1)
        model = re.search(model_pattern, text).group(2)
        year = re.search(year_pattern, text).group(1)

        data_car = {"brand": brand, "model": model, "year": year}
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑–µ
        await asyncio.sleep(3)
        text_description = await get_description(data_car)
        # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –±–∞–∑–µ –Ω–µ—Ç, —Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É
        if not text_description:
            text_description = await send_promt(data_car)
            await add_description(data_car, text_description)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await process_message.delete()
        await callback.message.answer(text_description)
    except:
        await process_message.delete()
        await callback.message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")



@router.message(~F.content_type.in_({ContentType.TEXT, ContentType.PHOTO}))
async def handle_unsupported_content(message: Message):
    await message.answer(
        "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–∏–º —Ç–∏–ø–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n‚û°Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è."
    )